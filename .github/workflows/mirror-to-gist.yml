name: Mirror Markdown to Gist

on:
  workflow_dispatch:
    inputs:
      file_path:
        description: 'Path to the markdown file (.md) in the repository to mirror to gist'
        required: true
        type: string

jobs:
  mirror-to-gist:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate and read markdown file
        id: read_file
        run: |
          # Check if file exists
          if [ ! -f "${{ github.event.inputs.file_path }}" ]; then
            echo "Error: File not found at ${{ github.event.inputs.file_path }}"
            exit 1
          fi
          
          # Check if file is markdown
          if [[ ! "${{ github.event.inputs.file_path }}" =~ \.md$ ]]; then
            echo "Error: File must be a markdown file (.md)"
            exit 1
          fi
          
          # Read the file content and encode it for JSON
          FILE_CONTENT=$(cat "${{ github.event.inputs.file_path }}" | jq -Rs .)
          echo "file_content<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get the filename
          FILENAME=$(basename "${{ github.event.inputs.file_path }}")
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          
          # Extract title from frontmatter if it exists
          DESCRIPTION=""
          if head -n 1 "${{ github.event.inputs.file_path }}" | grep -q "^---"; then
            # File has frontmatter, extract title
            FRONTMATTER=$(sed -n '/^---$/,/^---$/p' "${{ github.event.inputs.file_path }}" | sed '1d;$d')
            DESCRIPTION=$(echo "$FRONTMATTER" | grep "^title:" | sed 's/^title:[[:space:]]*//' | sed 's/^["'\'']//;s/["'\'']$//')
          fi
          
          # Use default description if no title found in frontmatter
          if [ -z "$DESCRIPTION" ]; then
            DESCRIPTION="Mirror of ${{ github.event.inputs.file_path }} from ${{ github.repository }}"
          fi
          
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          
      - name: Create or update gist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_PROFESSOR_SERP }}
        run: |
          # Prepare the gist payload
          FILENAME="${{ steps.read_file.outputs.filename }}"
          FILE_CONTENT=${{ steps.read_file.outputs.file_content }}
          
          # Create the gist using GitHub API
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/gists \
            -d "{
              \"description\": \"${{ steps.read_file.outputs.description }}\",
              \"public\": true,
              \"files\": {
                \"$FILENAME\": {
                  \"content\": $FILE_CONTENT
                }
              }
            }")
          
          # Extract and display the gist URL
          GIST_URL=$(echo "$RESPONSE" | jq -r '.html_url')
          
          if [ "$GIST_URL" = "null" ] || [ -z "$GIST_URL" ]; then
            echo "Error creating gist:"
            echo "$RESPONSE" | jq .
            exit 1
          fi
          
          echo "‚úÖ Gist created successfully!"
          echo "üìé Gist URL: $GIST_URL"
          echo "üìÅ Mirrored file: ${{ github.event.inputs.file_path }}"
